name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x, 22.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run type checking
      run: npm run typecheck
    
    - name: Build project
      run: npm run build
    
    - name: Run unit tests (core)
      run: npm test -- tests/unit/core/

    - name: Run unit tests (implementations)
      run: npm test -- tests/unit/implementations/

    - name: Run unit tests (query handler)
      run: npm test -- tests/unit/services/handlers/query-handler.test.ts

    - name: Run unit tests (worker handler)
      run: npm test -- tests/unit/services/handlers/worker-handler.test.ts

    - name: Run unit tests (adapters & utils)
      run: npm test -- tests/unit/adapters/ tests/unit/utils/

    - name: Run unit tests (error scenarios)
      run: npm test -- tests/unit/error-scenarios/

    - name: Run unit tests (root level)
      run: npm test -- tests/unit/*.test.ts

    # Integration tests require Claude Code CLI to be installed
    # Skip in CI since `claude` binary is not available
    # Run locally with: npm test -- tests/integration/
    
    - name: Test CLI commands
      run: |
        node dist/cli.js help
        timeout 5 node dist/cli.js mcp test || true

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build
      run: npm run build
    
    - name: Check if version changed
      id: version
      run: |
        PUBLISHED_VERSION=$(npm view claudine version 2>/dev/null || echo "0.0.0")
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "Published version: $PUBLISHED_VERSION"
        echo "Package version: $PACKAGE_VERSION"
        echo "published=$PUBLISHED_VERSION" >> $GITHUB_OUTPUT
        echo "package=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
        if [ "$PUBLISHED_VERSION" != "$PACKAGE_VERSION" ]; then
          echo "Version has changed, will publish to npm"
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "Version unchanged, skipping npm publish"
          echo "changed=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Check for release notes
      if: steps.version.outputs.changed == 'true'
      run: |
        RELEASE_NOTES_FILE="RELEASE_NOTES_v${{ steps.version.outputs.package }}.md"
        if [ ! -f "$RELEASE_NOTES_FILE" ]; then
          echo "‚ùå Error: $RELEASE_NOTES_FILE not found!"
          echo "Release notes are required for version ${{ steps.version.outputs.package }}"
          echo "Please create $RELEASE_NOTES_FILE with release notes before publishing"
          exit 1
        fi
        echo "‚úÖ Release notes found: $RELEASE_NOTES_FILE"
    
    - name: Publish to npm
      if: steps.version.outputs.changed == 'true'
      run: |
        echo "Publishing version ${{ steps.version.outputs.package }} to npm..."
        npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    
    - name: Create git tag
      if: steps.version.outputs.changed == 'true'
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag v${{ steps.version.outputs.package }}
        git push origin v${{ steps.version.outputs.package }}
    
    - name: Create GitHub release
      if: steps.version.outputs.changed == 'true'
      run: |
        gh release create v${{ steps.version.outputs.package }} \
          --title "üöÄ Claudine v${{ steps.version.outputs.package }}" \
          --notes-file RELEASE_NOTES_v${{ steps.version.outputs.package }}.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}